// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  number, 
  password,
  first_name,
  name,
  last_name,
  balance
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, number, password, first_name, name, last_name, balance, created_at
`

type CreateAccountParams struct {
	Number    string
	Password  string
	FirstName string
	Name      string
	LastName  pgtype.Text
	Balance   int64
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Number,
		arg.Password,
		arg.FirstName,
		arg.Name,
		arg.LastName,
		arg.Balance,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Password,
		&i.FirstName,
		&i.Name,
		&i.LastName,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, number, password, first_name, name, last_name, balance, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountByID(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Password,
		&i.FirstName,
		&i.Name,
		&i.LastName,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByNumber = `-- name: GetAccountByNumber :one
SELECT id, number, password, first_name, name, last_name, balance, created_at FROM accounts
WHERE number = $1 LIMIT 1
`

func (q *Queries) GetAccountByNumber(ctx context.Context, number string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByNumber, number)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Password,
		&i.FirstName,
		&i.Name,
		&i.LastName,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, number, password, first_name, name, last_name, balance, created_at FROM accounts
WHERE id = $1 LIMIT 1
FOR UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Password,
		&i.FirstName,
		&i.Name,
		&i.LastName,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, number, password, first_name, name, last_name, balance, created_at FROM accounts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.Password,
			&i.FirstName,
			&i.Name,
			&i.LastName,
			&i.Balance,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :one
UPDATE accounts
  set balance = $2
WHERE id = $1
RETURNING id, number, password, first_name, name, last_name, balance, created_at
`

type UpdateAccountBalanceParams struct {
	ID      int64
	Balance int64
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountBalance, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Password,
		&i.FirstName,
		&i.Name,
		&i.LastName,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountPassword = `-- name: UpdateAccountPassword :one
UPDATE accounts
  set password = $2
WHERE id = $1
RETURNING id, number, password, first_name, name, last_name, balance, created_at
`

type UpdateAccountPasswordParams struct {
	ID       int64
	Password string `json:"new_password"`
}

func (q *Queries) UpdateAccountPassword(ctx context.Context, arg UpdateAccountPasswordParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountPassword, arg.ID, arg.Password)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Password,
		&i.FirstName,
		&i.Name,
		&i.LastName,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}
