// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: entry.sql

package postgres

import (
	"context"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
  account_id,
  amount,
  place
) VALUES (
  $1, $2, $3
) RETURNING id, account_id, amount, place, created_at
`

type CreatePaymentParams struct {
	AccountID int64
	Amount    int64
	Place     string
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment, arg.AccountID, arg.Amount, arg.Place)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.Place,
		&i.CreatedAt,
	)
	return i, err
}

const getPayment = `-- name: GetPayment :one
SELECT id, account_id, amount, place, created_at FROM payments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id int64) (Payment, error) {
	row := q.db.QueryRow(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.Place,
		&i.CreatedAt,
	)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, account_id, amount, place, created_at FROM payments
WHERE account_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListPaymentsParams struct {
	AccountID int64
	Limit     int32
	Offset    int32
}

func (q *Queries) ListPayments(ctx context.Context, arg ListPaymentsParams) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPayments, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.Place,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type DeleteAllPayments struct {
	AccountID int64
}

const deletePayments = `-- name: DeletePayments :exec
DELETE FROM payments
WHERE account_id = $1
`

func (q *Queries) DeletePayments(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePayments, id)
	return err
}